#BlueJ class context
comment0.target=Algorithm
comment0.text=\r\n\ Algorithm\ for\ enrolling\ students\ in\ classes.\r\n
comment1.params=mapStudents\ enrollment
comment1.target=Algorithm(java.util.List,\ java.util.HashMap)
comment1.text=\r\n\ Constuctor\ for\ algorithm\r\n\ @param\ mapStudents\ List\ of\ all\ students\ who\ should\ be\ enrolled\ in\r\n\ courses\r\n\ @param\ enrollment\ Stores\ the\ number\ of\ students\ enrolled\ in\ each\ \r\n\ course\r\n
comment10.params=course
comment10.target=boolean\ isThereSpace(Course)
comment10.text=\r\n\ @param\ course\ The\ course.\r\n\ @return\ Whether\ there\ is\ space\ in\ the\ chosen\ course.\r\n
comment11.params=student\ maybe
comment11.target=boolean\ inDifSection(Student,\ Course)
comment11.text=\r\n\ @param\ student\ The\ student.\r\n\ @param\ maybe\ The\ course\ being\ considered\r\n\ @return\ Whether\ the\ student\ is\ already\ enrolled\ in\ a\ different\r\n\ section\r\n
comment12.params=student\ maybe
comment12.target=boolean\ overCredits(Student,\ Course)
comment12.text=\r\n\ @param\ student\r\n\ @param\ maybe\ The\ course\ being\ considered\r\n\ @return\ Whether\ adding\ the\ course\ will\ put\ the\ student\ over\ their\r\n\ max\ amount\ of\ credits\r\n
comment13.params=
comment13.target=void\ printEnrollment()
comment13.text=\r\n\ Print\ the\ toString\ of\ the\ student,\ \r\n\ followed\ by\ their\ schedule\ (using\ course\ toString).\r\n\ \r\n\ Hector\ Tran\ 2023\ 1\r\n\ CMPU-145-51\ Foundations/Computer\ Science\ \ \ \ 1.0\ \ \ \ TRF\ 1200PM-0115PM\r\n\ EDUC-361-51\ Sem\:\ Math/Science/Elem\ Classrm\ \ \ \ 1.0\ \ \ \ R\ 0310PM-0610PM\r\n\ ECON-235-51\ Sports\ Economics\ \ \ \ 1.0\ \ \ \ TR\ 1030AM-1145AM\r\n\ PHED-105-51\ Foundations\ of\ Wellness\ \ \ \ 0.5\ \ \ \ TR\ 0900AM-1015AM\r\n\ --------------------\r\n\ Chace\ Sanford\ 2023\ 2\r\n\ GNCS-355-51\ Childhood/Childrn\ 19C\ Britain\ \ \ \ 1.0\ \ \ \ R\ 0310PM-0510PM\r\n\ ART-318-51\ Building\ the\ Museum\ \ \ \ 1.0\ \ \ \ T\ 0100PM-0300PM\r\n\ CHEM-352-51\ Phys\ Chem-Molec\ Structr\ \ \ \ 1.0\ \ \ \ MW\ 1030AM-1145AM\r\n\ INTL-109-51\ A\ Lexicon\ of\ Forced\ Migration\ \ \ \ 1.0\ \ \ \ TR\ 1030AM-1145AM\r\n\ --------------------\r\n\ etc...\r\n
comment2.params=mapStudents
comment2.target=void\ fillpqHash(java.util.List)
comment2.text=\r\n\ Fills\ the\ hashmap\ containing\ the\ data\ structure\ used\ for\ the\r\n\ forward\ direction\ for\ enrollment,\ a\ priority\ queue.\r\n\ @param\ The\ list\ of\ students\ who\ need\ to\ be\ enrolled\r\n
comment3.params=
comment3.target=void\ makesHash()
comment3.text=\r\n\ Sets\ up\ the\ hashmap\ containing\ the\ data\ structure\ used\ for\r\n\ the\ reverse\ direction\ of\ the\ enrollment,\ a\ stack.\r\n
comment4.params=
comment4.target=void\ run()
comment4.text=\ \r\n\ Description\ of\ the\ algorithm\ from\ the\ Registrar's\ website\:\r\n\ \r\n\ Entry\ into\ a\ section\ is\ determined\ by\ the\ combination\ of\ your\ class\ year,\ the\ priority\ you\ give\ each\ section,\ and\ your\ draw\ number.\r\n\ Seniors\u2019\ requests\ are\ processed\ first\ followed\ sequentially\ by\ juniors\u2019,\ sophomores\u2019,\ and\ first-years\ requests.\r\n\ Your\ requests\ are\ considered\ in\ the\ order\ that\ you\ list\ them\ on\ the\ registration\ screen,\ with\ the\ first\ item\ having\ the\ highest\ priority.\ If\ one\ of\ your\ requests\ cannot\ be\ filled,\ then\ the\ next\ item\ in\ your\ list\ will\ be\ considered\ instead.\r\n\ For\ your\ class\ year,\ your\ draw\ number\ determines\ when\ one\ of\ your\ requests\ is\ considered.\ Your\ top\ request\ is\ considered\ immediately\ after\ the\ top\ requests\ of\ all\ of\ the\ students\ in\ your\ class\ with\ lower\ draw\ numbers.\ As\ mentioned\ above,\ if\ your\ top\ request\ cannot\ be\ granted\ you\ will\ be\ enrolled\ in\ the\ first\ request\ on\ your\ list\ that\ can\ be.\r\n\ \r\n\ In\ a\ second\ pass\ through\ the\ requests\ from\ your\ class,\ your\ top\ request\ among\ your\ remaining\ requests\ will\ be\ considered\ immediately\ before\ all\ of\ the\ students\ in\ your\ class\ with\ lower\ draw\ numbers.\ That\ is,\ the\ draw\ numbers\ work\ in\ reverse\ compared\ to\ the\ first\ pass.\ The\ remaining\ passes\ through\ the\ requests\ from\ your\ class\ continue\ the\ pattern\ of\ the\ first\ two\ passes,\ switching\ direction\ through\ the\ draw\ numbers\ on\ each\ pass.\r\n\ You\ may\ list\ multiple\ sections\ of\ the\ same\ course\ among\ your\ requests\ but\ you\ will\ be\ enrolled\ only\ in\ the\ first\ one\ on\ your\ list\ that\ is\ available.\ You\ will\ not\ be\ enrolled\ in\ multiple\ sections\ of\ the\ same\ course.\r\n\ You\ may\ also\ list\ sections\ of\ different\ courses\ that\ meet\ at\ the\ same\ time\ but\ you\ will\ be\ enrolled\ only\ in\ the\ first\ one\ on\ your\ list\ that\ is\ available.\ You\ will\ not\ be\ enrolled\ in\ sections\ with\ time\ conflicts.\r\n\ \r\n
comment5.params=
comment5.target=void\ goForward()
comment5.text=\r\n\ Goes\ through\ the\ students\ in\ order,\ adds\ one\ course\ to\ their\r\n\ schedule\ if\ possible,\ then\ adds\ them\ to\ the\ hashMap\ that\ will\r\n\ continue\ the\ enrollment\ process\ in\ reverse\ order.\r\n
comment6.params=
comment6.target=void\ goBackward()
comment6.text=\r\n\ Goes\ through\ the\ students\ in\ reverse\ order,\ adds\ one\ course\ to\ \r\n\ their\ schedule\ if\ possible,\ then\ adds\ them\ to\ the\ hashMap\ that\ \r\n\ will\ continue\ the\ enrollment\ process\ in\ forward\ order.\r\n
comment7.params=student
comment7.target=void\ addCourse(Student)
comment7.text=\r\n\ Calls\ a\ helper\ method\ to\ get\ a\ course\ to\ add,\ then\ adds\ it.\r\n\ If\ there\ are\ no\ courses\ to\ add,\ returns\ false.\r\n\ @param\ student\ The\ student\ whose\ schedule\ we\ want\ to\ add\ a\r\n\ course\ to\r\n
comment8.params=student
comment8.target=Course\ findCourseToAdd(Student)
comment8.text=\r\n\ Finds\ the\ first\ available\ course\ to\ add.\r\n\ If\ there\ are\ no\ courses\ that\ can\ be\ added,\ returns\ false.\r\n\ @param\ student\ Same\ as\ above.\r\n\ @return\ Course\ The\ first\ course\ that\ works\ to\ add\ to\ the\r\n\ student's\ schedule.\ Returns\ null\ if\ none\ are\ available\r\n
comment9.params=student\ maybe
comment9.target=boolean\ checkValidAdd(Student,\ Course)
comment9.text=\r\n\ Checks\ to\ see\ if\ the\ course\ can\ be\ added\ (doesn't\ conflict\r\n\ with\ student's\ schedule,\ etc.)\r\n\ @param\ student\ The\ student.\r\n\ @param\ maybe\ The\ course\ that\ is\ being\ considered\r\n\ @return\ Whether\ the\ course\ is\ valid\ to\ be\ added\r\n
numComments=14
